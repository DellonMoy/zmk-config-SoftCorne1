#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt { tapping-term-ms = <200>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        actIve_directory: actIve_directory {
            compatible = "zmk,behavior-hold-tap";
            label = "ACTIVE_DIRECTORY";
            bindings = <&mcro_sad>, <&mcro_ad>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            flavor = "tap-preferred";
        };

        media: media {
            compatible = "zmk,behavior-tap-dance";
            label = "MEDIA";
            #binding-cells = <0>;
            bindings = <&mt C_PP C_NEXT>, <&kp C_PREV>;
        };

        bt_loop: bt_loop {
            compatible = "zmk,behavior-sensor-rotate";
            label = "BT_LOOP";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        steno_br: steno_br {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp R>;
            label = "STENO_BR";
        };

        mcro_sQuote: mcro_sQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT_ARROW>;
            label = "MCRO_SQUOTE";
        };

        mcro_2Mclk: mcro_2Mclk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "MCRO_2MCLK";
        };

        mcro_na: mcro_na {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp FSLH &kp LS(A)>;
            label = "MCRO_NA";
        };

        mcro_2025: mcro_2025 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N5>;
            label = "MCRO_2025";
        };

        steno_by: steno_by {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp Y>;
            label = "STENO_BY";
        };

        mcro_ad: mcro_ad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_AD";
        };

        mcro_sad: mcro_sad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp DOT &kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_SAD";
            wait-ms = <0>;
        };

        steno_ac: steno_ac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp C>;
            label = "STENO_AC";
        };

        steno_ck: steno_ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "STENO_CK";
        };

        steno_fl: steno_fl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp L>;
            label = "STENO_FL";
        };

        steno_lf: steno_lf {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp F>;
            label = "STENO_LF";
        };

        steno_ou: steno_ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
            label = "STENO_OU";
        };

        steno_af: steno_af {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp F>;
            label = "STENO_AF";
        };

        steno_fe: steno_fe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp E>;
            label = "STENO_FE";
        };

        steno_ef: steno_ef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F>;
            label = "STENO_EF";
        };

        steno_sw: steno_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W>;
            label = "STENO_SW";
        };

        lazy_re: lazy_re {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp R &kp E &kp SPACE>;
            label = "LAZY_RE";
        };

        lazy_s: lazy_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp S &kp SPACE>;
            label = "LAZY_S";
        };

        lazy_nt: lazy_nt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp SQT &kp T &kp SPACE>;
            label = "LAZY_NT";
        };

        lazy_ll: lazy_ll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp L &kp L &kp SPACE>;
            label = "LAZY_LL";
        };

        lazy_ve: lazy_ve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp V &kp E &kp SPACE>;
            label = "LAZY_VE";
        };

        lazy_cmm: lazy_cmm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "LAZY_CMM";
        };

        steno_ing: steno_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp G>;
            label = "STENO_ING";
        };

        steno_ion: steno_ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N>;
            label = "STENO_ION";
        };

        lazy_like: lazy_like {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I &kp K &kp E>;
            label = "LAZY_LIKE";
        };

        lazy_exe: lazy_exe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp E>;
            label = "LAZY_EXE";
        };

        steno_rb: steno_rb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp B>;
            label = "STENO_RB";
        };

        steno_fa: steno_fa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A>;
            label = "STENO_FA";
        };

        lazy_m: lazy_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp M &kp SPACE>;
            label = "LAZY_M";
        };

        steno_ry: steno_ry {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp Y>;
            label = "STENO_RY";
        };

        steno_ys: steno_ys {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp S>;
            label = "STENO_YS";
        };

        steno_ty: steno_ty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp Y>;
            label = "STENO_TY";
        };

        steno_my: steno_my {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp Y>;
            label = "STENO_MY";
        };
    };

    combos {
        compatible = "zmk,combos";

        cmbo_cap {
            bindings = <&caps_word>;
            key-positions = <44 45>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
&kp TAB  &kp B           &kp W           &kp M          &mt PRINTSCREEN P  &mt AMPS PERIOD                                  &kp UP_ARROW             &kp Q            &kp F              &kp C               &kp U            &kp J            &mt F2 F5
&sl 4    &mt LEFT_GUI R  &mt LEFT_ALT S  &mt LCTRL T    &mt LEFT_SHIFT H   &kp X                            &kp LEFT_ARROW  &none         &kp RIGHT  &mt TILDE UNDER  &mt RIGHT_SHIFT N  &mt RCTRL A         &mt RIGHT_ALT I  &mt RIGHT_GUI O  &sl 4
&kp RET  &kp Y           &key_repeat     &kp G          &kp D              &mt QUESTION EXCL  &kp LC(N0)                    &kp DOWN                 &kp Z            &kp L              &kp K               &key_repeat      &kp V            &kp RET
                                         &mt F4 ESCAPE  &lt 2 SPACE        &sl 3                                                                     &sl 3            &lt 1 E            &kp LA(LC(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        num+sym {
            bindings = <
&kp DEL   &kp EQUAL    &kp N1  &kp N2      &kp N3     &kp DOLLAR                              &none           &kp GRAVE  &mt PIPE BSLH                   &kp HASH                            &mt DOUBLE_QUOTES SINGLE_QUOTE  &none                          &sk RCTRL
&kp BSPC  &key_repeat  &kp N4  &kp N5      &kp N6     &kp N0                          &trans  &trans  &trans  &none      &mt CARET ASTRK                 &kp FSLH                            &kp PLUS                        &kp MINUS                      &mt COLON SEMICOLON
&trans    &kp N0       &kp N7  &kp N8      &kp N9     &kp PERCENT       &kp C_MUTE            &none           &none      &mt LESS_THAN LEFT_PARENTHESIS  &mt GREATER_THAN RIGHT_PARENTHESIS  &mt LEFT_BRACE LEFT_BRACKET     &mt RIGHT_BRACE RIGHT_BRACKET  &none
                               &sk LSHIFT  &kp SPACE  &mt COMMA PERIOD                                        &none      &none                           &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav+hot {
            bindings = <
&mt LC(DELETE) DELETE        &media     &mcro_na         &kp UP           &mcro_2025       &none                       &trans         &none        &none           &mmv MOVE_UP    &none            &none      &none
&mt LC(BACKSPACE) BACKSPACE  &kp LC(A)  &kp LEFT         &kp DOWN         &kp RIGHT        &none                &none  &none   &none  &none        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &none
&kp LGUI                     &kp LC(F)  &mt LG(V) LC(V)  &mt LC(X) LC(C)  &mt LC(Y) LC(Z)  &none  &bt BT_CLR           &trans         &none        &mt HOME PG_UP  &mt END PG_DN   &sk RSHFT        &sk RCTRL  &kp RGUI
                                                         &none            &none            &none                                      &mcro_2Mclk  &mkp LCLK       &kp RG(RS(D))
            >;

            sensor-bindings = <&bt_loop>;
        };

        steno {
            bindings = <
&trans      &steno_br  &steno_sw  &steno_my  &none              &none                   &trans          &none  &steno_fl          &steno_ac  &steno_ou   &none      &none
&none       &steno_rb  &steno_ys  &steno_ty  &none              &none           &trans  &trans  &trans  &none  &steno_fe          &steno_af  &steno_ing  &steno_ef  &none
&sk LSHIFT  &steno_ry  &none      &none      &none              &none  &none            &trans          &none  &steno_lf          &steno_ck  &steno_ion  &none      &sk RSHIFT
                                  &none      &kp LC(BACKSPACE)  &none                                   &none  &kp RC(BACKSPACE)  &none
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };

        lazy {
            bindings = <
&trans  &actIve_directory 0 0  &none    &lazy_m   &trans     &trans                      &trans          &trans  &steno_fa  &trans      &trans        &trans    &trans
&trans  &lazy_re               &lazy_s  &lazy_nt  &trans     &lazy_exe           &trans  &trans  &trans  &trans  &trans     &kp AT      &kp NUMBER_1  &kp N0    &trans
&trans  &steno_by              &trans   &trans    &trans     &trans     &none            &trans          &trans  &lazy_ll   &lazy_like  &trans        &lazy_ve  &trans
                                        &trans    &lazy_cmm  &trans                                      &trans  &kp N3     &trans
            >;
        };
    };
};
