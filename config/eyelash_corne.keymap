#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        steno_br: steno_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp R>;
            label = "STENO_1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
&trans   &kp B  &kp W        &kp M               &kp P        &mt COMMA PERIOD                                 &mmv MOVE_UP                     &kp Q            &kp F    &kp C                     &kp U        &kp J  &trans
&sl 4    &kp R  &kp S        &kp T               &kp H        &kp X                            &mmv MOVE_LEFT  &none           &mmv MOVE_RIGHT  &mt MINUS UNDER  &kp N    &kp A                     &kp I        &kp O  &sl 4
&kp RET  &kp Y  &key_repeat  &kp G               &kp D        &mt QUESTION EXCL  &kp LC(N0)                    &mmv MOVE_DOWN                   &kp Z            &kp L    &kp K                     &key_repeat  &kp V  &kp RET
                             &mt LG(TAB) ESCAPE  &lt 2 SPACE  &sl 3                                                                             &sl 3            &lt 1 E  &mt LG(L) RA(RC(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        num+sym {
            bindings = <
&kp DEL   &kp EQUAL    &kp N1  &kp N2  &kp N3     &kp DOLLAR                         &none           &trans     &kp BSLH       &kp HASH          &kp PIPE  &kp GRAVE  &trans
&kp BSPC  &key_repeat  &kp N4  &kp N5  &kp N6     &kp N0                     &trans  &trans  &trans  &kp CARET  &kp ASTRK      &kp FSLH          &kp PLUS  &kp MINUS  &trans
&trans    &kp N0       &kp N7  &kp N8  &kp N9     &kp PERCENT       &none            &none           &none      &kp LESS_THAN  &kp GREATER_THAN  &trans    &trans     &trans
                               &trans  &kp SPACE  &mt COMMA PERIOD                                   &trans     &trans         &trans
            >;
        };

        nav+hot {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        steno {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        lazy {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
