#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1600  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30    // 10

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <75>;
};

&lt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <75>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        act_dir: act_dir {
            compatible = "zmk,behavior-hold-tap";
            label = "ACT_DIR";
            bindings = <&mcro_sad>, <&mcro_ad>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            flavor = "tap-preferred";
        };

        media: media {
            compatible = "zmk,behavior-tap-dance";
            label = "MEDIA";
            #binding-cells = <0>;
            bindings = <&mt C_PP C_NEXT>, <&kp C_PREV>;
        };

        bt_loop: bt_loop {
            compatible = "zmk,behavior-sensor-rotate";
            label = "BT_LOOP";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;
        };

        rgb_type: rgb_type {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_TYPE";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFF>, <&rgb_ug RGB_EFR>;
        };

        sk_tap: sk_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_TAP";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        mcro_sQuote: mcro_sQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT_ARROW>;
            label = "MCRO_SQUOTE";
        };

        mcro_2Mclk: mcro_2Mclk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "MCRO_2MCLK";
        };

        mcro_na: mcro_na {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp FSLH &kp LS(A)>;
            label = "MCRO_NA";
        };

        mcro_2025: mcro_2025 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N5>;
            label = "MCRO_2025";
        };

        mcro_ad: mcro_ad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_AD";
        };

        mcro_sad: mcro_sad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp DOT &kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_SAD";
            wait-ms = <0>;
        };

        steno_fl: steno_fl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp L>;
            label = "STENO_FL";
        };

        steno_lf: steno_lf {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp F>;
            label = "STENO_LF";
        };

        steno_ou: steno_ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
            label = "STENO_OU";
        };

        steno_af: steno_af {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp F>;
            label = "STENO_AF";
        };

        steno_fe: steno_fe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp E>;
            label = "STENO_FE";
        };

        steno_ef: steno_ef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F>;
            label = "STENO_EF";
        };

        steno_sw: steno_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W>;
            label = "STENO_SW";
        };

        lazy_r: lazy_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp R &kp E &kp SPACE>;
            label = "LAZY_R";
        };

        lazy_s: lazy_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp S &kp SPACE>;
            label = "LAZY_S";
        };

        lazy_t: lazy_t {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp T &kp SPACE>;
            label = "LAZY_T";
        };

        lazy_L: lazy_L {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp L &kp L &kp SPACE>;
            label = "LAZY_L";
        };

        lazy_v: lazy_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp V &kp E &kp SPACE>;
            label = "LAZY_V";
        };

        lazy_cmm: lazy_cmm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "LAZY_CMM";
        };

        lazy_ke: lazy_ke {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp E>;
            label = "LAZY_KE";
        };

        lazy_exe: lazy_exe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp E>;
            label = "LAZY_EXE";
        };

        lazy_fa: lazy_fa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A>;
            label = "LAZY_FA";
        };

        lazy_m: lazy_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp M &kp SPACE>;
            label = "LAZY_M";
        };

        steno_ov: steno_ov {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp V>;
            label = "STENO_OV";
        };

        steno_gm: steno_gm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp M>;
            label = "STENO_GM";
        };

        lazy_d: lazy_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp D &kp SPACE>;
            label = "LAZY_D";
        };

        lazy_au: lazy_au {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp U>;
            label = "LAZY_AU";
        };

        lazy_eve: lazy_eve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp V &kp E>;
            label = "LAZY_EVE";
        };

        lazy_c: lazy_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp SQT>;
            label = "LAZY_C";
        };

        steno_ua: steno_ua {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp A>;
            label = "STENO_UA";
        };

        lazy_rb: lazy_rb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp B>;
            label = "LAZY_RB";
        };

        lazy_br: lazy_br {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp R>;
            label = "LAZY_BR";
        };

        lazy_be: lazy_be {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E>;
            label = "LAZY_BE";
        };

        alt255: alt255 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_NUM &kt LEFT_ALT &kp KP_N2 &kp KP_N5 &kp KP_N5 &kt LEFT_ALT &kp KP_NUM>;
            label = "ALT255";
        };

        steno_be: steno_be {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E>;
            label = "STENO_BE";
        };

        steno_sc: steno_sc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp C>;
            label = "STENO_SC";
        };

        steno_ck: steno_ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "STENO_CK";
        };

        steno_ve: steno_ve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp E>;
            label = "STENO_VE";
        };

        lazy_vy: lazy_vy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp Y>;
            label = "LAZY_VY";
        };

        lazy_iv: lazy_iv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp V>;
            label = "LAZY_IV";
        };

        steno_gh: steno_gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp H>;
            label = "STENO_GH";
        };

        steno_rt: steno_rt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp T>;
            label = "STENO_RT";
        };

        steno_eq: steno_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp Q>;
            label = "STENO_EQ";
        };

        steno_jo: steno_jo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp J &kp O>;
            label = "STENO_JO";
        };
    };

    combos {
        compatible = "zmk,combos";

        cmbo_cap {
            bindings = <&caps_word>;
            key-positions = <44 45>;
            layers = <0>;
        };

        cmbo_bs {
            bindings = <&kp LC(BSPC)>;
            key-positions = <14 15>;
        };

        cmbo_del {
            bindings = <&kp LC(DEL)>;
            key-positions = <1 2>;
        };

        cmbo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            label = "alpha";
            bindings = <
&none      &kp B           &kp W           &kp M          &mt PRINTSCREEN P  &kp Z                       &sl 3         &kp Q                     &kp F              &kp U               &kp Y            &kp J            &mt F2 F5
&sl 4      &mt LEFT_GUI R  &mt LEFT_ALT S  &mt LCTRL T    &mt LEFT_SHIFT H   &kp X                &none  &none  &none  &mt TILDE UNDER           &mt RIGHT_SHIFT N  &mt RCTRL A         &mt RIGHT_ALT I  &mt RIGHT_GUI O  &sl 4
&kp ENTER  &key_repeat     &kp C           &kp G          &kp D              &none  &kp LC(N0)           &none         &mt QUESTION EXCLAMATION  &kp L              &kp K               &kp V            &key_repeat      &kp ENTER
                                           &mt F4 ESCAPE  &lt 2 SPACE        &sl 3                                     &sl 3                     &lt 1 E            &kp LA(LC(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        num+sym {
            label = "num+sym";
            bindings = <
&none            &none        &kp N3  &kp N4  &kp N7           &kp DOLLAR                             &none         &kp GRAVE  &mt PIPE BSLH                   &kp HASH                            &mt DOUBLE_QUOTES SINGLE_QUOTE  &sk RSHIFT                     &sk RCTRL
&none            &key_repeat  &kp N0  &kp N1  &kp N2           &kp N9                          &none  &none  &none  &none      &mt CARET ASTRK                 &mt AT FSLH                         &mt AMPS PLUS                   &kp MINUS                      &mt COLON SEMICOLON
&mt EQUAL ENTER  &none        &kp N5  &kp N6  &kp N8           &kp PERCENT       &kp C_MUTE           &none         &none      &mt LESS_THAN LEFT_PARENTHESIS  &mt GREATER_THAN RIGHT_PARENTHESIS  &mt LEFT_BRACE LEFT_BRACKET     &mt RIGHT_BRACE RIGHT_BRACKET  &none
                                      &none   &mt LCTRL SPACE  &mt COMMA PERIOD                                     &none      &none                           &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav+hot {
            label = "nav+hot";
            bindings = <
&none         &none      &mcro_na         &kp UP           &mcro_2025       &none                            &none                 &none        &none           &mmv MOVE_UP    &none            &none      &none
&none         &kp LC(A)  &kp LEFT         &kp DOWN         &kp RIGHT        &none                &kp C_PREV  &none     &kp C_NEXT  &none        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &kp RGUI
&act_dir 0 0  &kp LC(F)  &mt LG(V) LC(V)  &mt LC(X) LC(C)  &mt LC(Y) LC(Z)  &none  &bt BT_CLR                &kp C_PP              &none        &mt HOME PG_UP  &mt END PG_DN   &sk RSHFT        &sk RCTRL  &sk RALT
                                          &none            &none            &none                                                  &mcro_2Mclk  &mkp LCLK       &kp RG(RS(D))
            >;

            sensor-bindings = <&bt_loop>;
        };

        steno {
            label = "steno";
            bindings = <
&trans      &lazy_rb  &none      &none      &none         &none                  &none         &steno_eq  &steno_fl     &steno_ua  &steno_ou  &steno_jo  &none
&none       &lazy_br  &steno_sw  &steno_rt  &steno_gh     &none           &none  &none  &none  &none      &steno_fe     &steno_af  &steno_ef  &steno_ov  &none
&sk LSHIFT  &lazy_be  &steno_sc  &steno_gm  &none         &none  &none           &none         &none      &steno_lf     &lazy_ke   &steno_ve  &lazy_eve  &sk RSHIFT
                                 &none      &kp LC(BSPC)  &none                                &none      &kp RC(BSPC)  &none
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        lazy {
            label = "lazy";
            bindings = <
&none      &alt255  &none    &lazy_m  &none      &none                                &to 5         &none  &none    &lazy_au   &lazy_vy  &none  &none
&none      &lazy_r  &lazy_s  &lazy_t  &none      &lazy_exe                     &none  &none  &none  &none  &none    &lazy_fa   &lazy_iv  &none  &none
&sk LSHFT  &none    &lazy_c  &none    &lazy_d    &none      &rgb_ug RGB_TOG           &none         &none  &lazy_L  &steno_ck  &lazy_v   &none  &sk RSHFT
                             &trans   &lazy_cmm  &none                                              &none  &none    &none
            >;

            sensor-bindings = <&rgb_type>;
        };

        Gaming {
            label = "gaming";
            bindings = <
&mt LGUI TAB  &kp F  &kp Q  &kp W     &kp E  &kp T                      &to 0         &none  &none  &none  &none  &none  &none
&kp LSHFT     &kp G  &kp A  &kp S     &kp D  &kp R               &none  &none  &none  &none  &none  &none  &none  &none  &none
&kp P         &kp M  &kp Z  &kp X     &kp C  &kp V      &none           &none         &none  &none  &none  &none  &none  &none
                            &kp LALT  &kp B  &kp SPACE                                &none  &none  &none
            >;
        };
    };
};
