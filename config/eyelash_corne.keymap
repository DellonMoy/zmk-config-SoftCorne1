#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <50>;
};

&lt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <50>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        actIve_directory: actIve_directory {
            compatible = "zmk,behavior-hold-tap";
            label = "ACTIVE_DIRECTORY";
            bindings = <&mcro_sad>, <&mcro_ad>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <0>;
            flavor = "tap-preferred";
        };

        media: media {
            compatible = "zmk,behavior-tap-dance";
            label = "MEDIA";
            #binding-cells = <0>;
            bindings = <&mt C_PP C_NEXT>, <&kp C_PREV>;
        };

        bt_loop: bt_loop {
            compatible = "zmk,behavior-sensor-rotate";
            label = "BT_LOOP";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;
        };

        rgb_type: rgb_type {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_TYPE";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFF>, <&rgb_ug RGB_EFR>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        mcro_sQuote: mcro_sQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT_ARROW>;
            label = "MCRO_SQUOTE";
        };

        mcro_2Mclk: mcro_2Mclk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "MCRO_2MCLK";
        };

        mcro_na: mcro_na {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp FSLH &kp LS(A)>;
            label = "MCRO_NA";
        };

        mcro_2025: mcro_2025 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N5>;
            label = "MCRO_2025";
        };

        mcro_ad: mcro_ad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_AD";
        };

        mcro_sad: mcro_sad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp DOT &kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MCRO_SAD";
            wait-ms = <0>;
        };

        steno_ac: steno_ac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp C>;
            label = "STENO_AC";
        };

        steno_ck: steno_ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "STENO_CK";
        };

        steno_fl: steno_fl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp L>;
            label = "STENO_FL";
        };

        steno_lf: steno_lf {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp F>;
            label = "STENO_LF";
        };

        steno_ou: steno_ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
            label = "STENO_OU";
        };

        steno_af: steno_af {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp F>;
            label = "STENO_AF";
        };

        steno_fe: steno_fe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp E>;
            label = "STENO_FE";
        };

        steno_ef: steno_ef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F>;
            label = "STENO_EF";
        };

        steno_sw: steno_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W>;
            label = "STENO_SW";
        };

        lazy_re: lazy_re {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp R &kp E &kp SPACE>;
            label = "LAZY_RE";
        };

        lazy_s: lazy_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp S &kp SPACE>;
            label = "LAZY_S";
        };

        lazy_nt: lazy_nt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp SQT &kp T &kp SPACE>;
            label = "LAZY_NT";
        };

        lazy_ll: lazy_ll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp L &kp L &kp SPACE>;
            label = "LAZY_LL";
        };

        lazy_ve: lazy_ve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp V &kp E &kp SPACE>;
            label = "LAZY_VE";
        };

        lazy_cmm: lazy_cmm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "LAZY_CMM";
        };

        steno_ing: steno_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp G>;
            label = "STENO_ING";
        };

        steno_ion: steno_ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N>;
            label = "STENO_ION";
        };

        lazy_like: lazy_like {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I &kp K &kp E>;
            label = "LAZY_LIKE";
        };

        lazy_exe: lazy_exe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp E>;
            label = "LAZY_EXE";
        };

        steno_fa: steno_fa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A>;
            label = "STENO_FA";
        };

        lazy_m: lazy_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp M &kp SPACE>;
            label = "LAZY_M";
        };

        steno_ry: steno_ry {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp Y>;
            label = "STENO_RY";
        };

        steno_ys: steno_ys {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp S>;
            label = "STENO_YS";
        };

        steno_ty: steno_ty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp Y>;
            label = "STENO_TY";
        };

        steno_my: steno_my {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp Y>;
            label = "STENO_MY";
        };

        steno_ov: steno_ov {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp V>;
            label = "STENO_OV";
        };

        steno_gm: steno_gm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp M>;
            label = "STENO_GM";
        };

        lazy_ca: lazy_ca {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp A>;
            label = "LAZY_CA";
        };

        lazy_c: lazy_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp SQT>;
            label = "LAZY_C";
        };

        lazy_d: lazy_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp D>;
            label = "LAZY_D";
        };

        lazy_ious: lazy_ious {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp U &kp S>;
            label = "LAZY_IOUS";
        };

        lazy_iest: lazy_iest {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp E &kp S &kp T>;
            label = "LAZY_IEST";
        };

        lazy_con: lazy_con {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N>;
            label = "LAZY_CON";
        };

        lazy_eve: lazy_eve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp V &kp E>;
            label = "LAZY_EVE";
        };
    };

    combos {
        compatible = "zmk,combos";

        cmbo_cap {
            bindings = <&caps_word>;
            key-positions = <43 46>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            label = "alpha";
            bindings = <
&kp TAB    &mt QUESTION EXCL  &kp W           &kp M          &mt PRINTSCREEN P  &kp X                                 &sl 3         &kp Q            &kp F              &kp C               &kp U            &kp J            &mt F2 F5
&sl 4      &mt LEFT_GUI R     &mt LEFT_ALT S  &mt LCTRL T    &mt LEFT_SHIFT H   &kp B                          &none  &none  &none  &mt TILDE UNDER  &mt RIGHT_SHIFT N  &mt RCTRL A         &mt RIGHT_ALT I  &mt RIGHT_GUI O  &sl 4
&kp ENTER  &mt AT Y           &key_repeat     &kp G          &kp D              &mt AMPS PERIOD  &kp LC(N0)           &none         &kp Z            &kp L              &kp K               &key_repeat      &kp V            &kp ENTER
                                              &mt F4 ESCAPE  &sl 3              &lt 2 SPACE                                         &lt 1 E          &sl 3              &kp LA(LC(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        num+sym {
            label = "num+sym";
            bindings = <
&kp DEL   &kp EQUAL    &kp N1  &kp N2      &kp N3     &kp DOLLAR                             &none         &kp GRAVE  &mt PIPE BSLH                   &kp HASH                            &mt DOUBLE_QUOTES SINGLE_QUOTE  &none                          &sk RCTRL
&kp BSPC  &key_repeat  &kp N4  &kp N5      &kp N6     &kp N0                          &none  &none  &none  &none      &mt CARET ASTRK                 &kp FSLH                            &kp PLUS                        &kp MINUS                      &mt COLON SEMICOLON
&trans    &kp N0       &kp N7  &kp N8      &kp N9     &kp PERCENT       &kp C_MUTE           &none         &none      &mt LESS_THAN LEFT_PARENTHESIS  &mt GREATER_THAN RIGHT_PARENTHESIS  &mt LEFT_BRACE LEFT_BRACKET     &mt RIGHT_BRACE RIGHT_BRACKET  &none
                               &sk LSHIFT  &kp SPACE  &mt COMMA PERIOD                                     &none      &none                           &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav+hot {
            label = "nav+hot";
            bindings = <
&mt LC(DELETE) DELETE        &media     &mcro_na         &kp UP           &mcro_2025       &none                                       &none         &none      &none           &mmv MOVE_UP    &none            &none      &none
&mt LC(BACKSPACE) BACKSPACE  &kp LC(A)  &kp LEFT         &kp DOWN         &kp RIGHT        &actIve_directory 0 0                &none  &none  &none  &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &kp RGUI
&kp LGUI                     &kp LC(F)  &mt LG(V) LC(V)  &mt LC(X) LC(C)  &mt LC(Y) LC(Z)  &none                  &bt BT_CLR           &none         &none      &mt HOME PG_UP  &mt END PG_DN   &sk RSHFT        &sk RCTRL  &none
                                                         &none            &none            &none                                                     &mkp LCLK  &mcro_2Mclk     &kp RG(RS(D))
            >;

            sensor-bindings = <&bt_loop>;
        };

        steno {
            label = "steno";
            bindings = <
&trans      &none      &steno_sw  &steno_my  &none  &none                         &none         &none         &steno_fl  &steno_ac  &steno_ou   &none      &none
&none       &steno_ry  &steno_ys  &steno_ty  &none  &none                  &none  &none  &none  &none         &steno_fe  &steno_af  &steno_ing  &steno_ef  &none
&sk LSHIFT  &none      &none      &steno_gm  &none  &none         &none           &none         &none         &steno_lf  &steno_ck  &steno_ion  &steno_ov  &sk RSHIFT
                                  &none      &none  &kp LC(BSPC)                                &kp RC(BSPC)  &none      &none
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        lazy {
            label = "lazy";
            bindings = <
&none  &none     &none    &lazy_m   &none    &lazy_exe                            &to 5         &none      &steno_fa  &lazy_ca    &lazy_c     &none      &none
&none  &lazy_re  &lazy_s  &lazy_nt  &none    &none                         &none  &none  &none  &none      &none      &kp AT      &lazy_iest  &lazy_con  &none
&none  &none     &none    &none     &lazy_d  &none      &rgb_ug RGB_TOG           &none         &none      &lazy_ll   &lazy_like  &lazy_ious  &lazy_ve   &none
                          &trans    &none    &lazy_cmm                                          &lazy_eve  &none      &none
            >;

            sensor-bindings = <&rgb_type>;
        };

        Gaming {
            label = "gaming";
            bindings = <
&mt LGUI TAB  &kp F  &kp Q  &kp W     &kp E  &kp T                      &to 0         &none  &none  &none  &none  &none  &none
&kp LSHFT     &kp G  &kp A  &kp S     &kp D  &kp R               &none  &none  &none  &none  &none  &none  &none  &none  &none
&kp P         &kp M  &kp Z  &kp X     &kp C  &kp V      &to 0           &none         &none  &none  &none  &none  &none  &none
                            &kp LALT  &kp B  &kp SPACE                                &none  &none  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
