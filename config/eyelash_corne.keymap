#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        steno_br: steno_br {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp R>;
            label = "STENO_BR";
        };

        mcro_sQuote: mcro_sQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT_ARROW>;
            label = "MCRO_SQUOTE";
        };

        mcro_2Mclk: mcro_2Mclk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "MCRO_2MCLK";
        };

        mcro_na: mcro_na {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp FSLH &kp LS(A)>;
            label = "MCRO_NA";
        };

        mcro_2025: mcro_2025 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N5>;
            label = "MCRO_2025";
        };

        steno_by: steno_by {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp Y>;
            label = "STENO_BY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
&trans   &kp B           &kp W           &kp M               &kp P             &mt COMMA PERIOD                                 &kp UP_ARROW             &kp Q            &kp F              &kp C                     &kp U            &kp J            &trans
&sl 4    &mt LEFT_GUI R  &mt LEFT_ALT S  &mt LCTRL T         &mt LEFT_SHIFT H  &kp X                            &kp LEFT_ARROW  &none         &kp RIGHT  &mt TILDE UNDER  &mt RIGHT_SHIFT N  &mt RCTRL A               &mt RIGHT_ALT I  &mt RIGHT_GUI O  &sl 4
&kp RET  &kp Y           &key_repeat     &kp G               &kp D             &mt QUESTION EXCL  &kp LC(N0)                    &kp DOWN                 &kp Z            &kp L              &kp K                     &key_repeat      &kp V            &kp RET
                                         &mt LG(TAB) ESCAPE  &lt 2 SPACE       &sl 3                                                                     &sl 3            &lt 1 E            &mt LG(L) RA(RC(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(EQUAL) LC(MINUS)>;
        };

        num+sym {
            bindings = <
&kp DEL   &kp EQUAL    &kp N1  &kp N2  &kp N3     &kp DOLLAR                              &none           &trans     &kp BSLH       &kp HASH          &kp PIPE  &mt DOUBLE_QUOTES SINGLE_QUOTE  &trans
&kp BSPC  &key_repeat  &kp N4  &kp N5  &kp N6     &kp N0                          &trans  &trans  &trans  &kp CARET  &kp ASTRK      &kp FSLH          &kp PLUS  &kp MINUS                       &trans
&trans    &kp N0       &kp N7  &kp N8  &kp N9     &kp PERCENT       &kp C_MUTE            &none           &none      &kp LESS_THAN  &kp GREATER_THAN  &trans    &mt COLON SEMICOLON             &trans
                               &trans  &kp SPACE  &mt COMMA PERIOD                                        &trans     &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav+hot {
            bindings = <
&mt LC(DELETE) DELETE        &trans  &trans  &none   &trans  &trans                    &trans          &trans       &trans          &mmv MOVE_UP    &trans           &trans     &trans
&mt LC(BACKSPACE) BACKSPACE  &trans  &none   &none   &none   &trans            &trans  &trans  &trans  &trans       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &trans
&kp LGUI                     &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans       &mt HOME PG_UP  &mt END PG_DN   &none            &none      &kp RGUI
                                             &trans  &trans  &trans                                    &mcro_2Mclk  &mkp LCLK       &kp RG(RS(D))
            >;
        };

        steno {
            bindings = <
&trans      &steno_br  &trans  &trans  &trans             &trans                    &trans          &trans  &trans             &trans  &trans  &trans  &trans
&trans      &trans     &trans  &trans  &trans             &trans            &trans  &trans  &trans  &trans  &trans             &trans  &trans  &trans  &trans
&sk LSHIFT  &steno_by  &trans  &trans  &trans             &trans  &trans            &trans          &trans  &trans             &trans  &trans  &trans  &sk RSHIFT
                               &trans  &kp LC(BACKSPACE)  &trans                                    &none   &kp RC(BACKSPACE)  &trans
            >;
        };

        lazy {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
